// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1--rc1
// source: raxfile.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaxFileClient is the client API for RaxFile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaxFileClient interface {
	SearchVideos(ctx context.Context, in *SearchVideosRequest, opts ...grpc.CallOption) (*SearchVideosResponse, error)
	RescanFilesAndUpdateDB(ctx context.Context, in *RescanFilesAndUpdateDBRequest, opts ...grpc.CallOption) (*RescanFilesAndUpdateDBResponse, error)
}

type raxFileClient struct {
	cc grpc.ClientConnInterface
}

func NewRaxFileClient(cc grpc.ClientConnInterface) RaxFileClient {
	return &raxFileClient{cc}
}

func (c *raxFileClient) SearchVideos(ctx context.Context, in *SearchVideosRequest, opts ...grpc.CallOption) (*SearchVideosResponse, error) {
	out := new(SearchVideosResponse)
	err := c.cc.Invoke(ctx, "/protos.RaxFile/SearchVideos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raxFileClient) RescanFilesAndUpdateDB(ctx context.Context, in *RescanFilesAndUpdateDBRequest, opts ...grpc.CallOption) (*RescanFilesAndUpdateDBResponse, error) {
	out := new(RescanFilesAndUpdateDBResponse)
	err := c.cc.Invoke(ctx, "/protos.RaxFile/RescanFilesAndUpdateDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaxFileServer is the server API for RaxFile service.
// All implementations must embed UnimplementedRaxFileServer
// for forward compatibility
type RaxFileServer interface {
	SearchVideos(context.Context, *SearchVideosRequest) (*SearchVideosResponse, error)
	RescanFilesAndUpdateDB(context.Context, *RescanFilesAndUpdateDBRequest) (*RescanFilesAndUpdateDBResponse, error)
	mustEmbedUnimplementedRaxFileServer()
}

// UnimplementedRaxFileServer must be embedded to have forward compatible implementations.
type UnimplementedRaxFileServer struct {
}

func (UnimplementedRaxFileServer) SearchVideos(context.Context, *SearchVideosRequest) (*SearchVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchVideos not implemented")
}
func (UnimplementedRaxFileServer) RescanFilesAndUpdateDB(context.Context, *RescanFilesAndUpdateDBRequest) (*RescanFilesAndUpdateDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RescanFilesAndUpdateDB not implemented")
}
func (UnimplementedRaxFileServer) mustEmbedUnimplementedRaxFileServer() {}

// UnsafeRaxFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaxFileServer will
// result in compilation errors.
type UnsafeRaxFileServer interface {
	mustEmbedUnimplementedRaxFileServer()
}

func RegisterRaxFileServer(s grpc.ServiceRegistrar, srv RaxFileServer) {
	s.RegisterService(&RaxFile_ServiceDesc, srv)
}

func _RaxFile_SearchVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaxFileServer).SearchVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.RaxFile/SearchVideos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaxFileServer).SearchVideos(ctx, req.(*SearchVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaxFile_RescanFilesAndUpdateDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RescanFilesAndUpdateDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaxFileServer).RescanFilesAndUpdateDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.RaxFile/RescanFilesAndUpdateDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaxFileServer).RescanFilesAndUpdateDB(ctx, req.(*RescanFilesAndUpdateDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RaxFile_ServiceDesc is the grpc.ServiceDesc for RaxFile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaxFile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.RaxFile",
	HandlerType: (*RaxFileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchVideos",
			Handler:    _RaxFile_SearchVideos_Handler,
		},
		{
			MethodName: "RescanFilesAndUpdateDB",
			Handler:    _RaxFile_RescanFilesAndUpdateDB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raxfile.proto",
}
